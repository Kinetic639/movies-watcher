[{"D:\\projects\\movies-watcher\\src\\index.tsx":"1","D:\\projects\\movies-watcher\\src\\reportWebVitals.ts":"2","D:\\projects\\movies-watcher\\src\\App.tsx":"3","D:\\projects\\movies-watcher\\src\\redux\\app\\store.ts":"4","D:\\projects\\movies-watcher\\src\\redux\\app\\hooks.ts":"5","D:\\projects\\movies-watcher\\src\\redux\\features\\movies-slice.ts":"6","D:\\projects\\movies-watcher\\src\\components\\NavBar\\NavBar.tsx":"7","D:\\projects\\movies-watcher\\src\\components\\movies\\MoviesList\\MoviesList.tsx":"8","D:\\projects\\movies-watcher\\src\\config.ts":"9","D:\\projects\\movies-watcher\\src\\components\\movies\\MoviesRow\\MoviesRow.tsx":"10","D:\\projects\\movies-watcher\\src\\components\\movies\\MovieCard\\MovieCard.tsx":"11","D:\\projects\\movies-watcher\\src\\redux\\services\\apiSlice.ts":"12","D:\\projects\\movies-watcher\\src\\components\\Banner\\Banner.tsx":"13","D:\\projects\\movies-watcher\\src\\redux\\features\\settings-slice.ts":"14","D:\\projects\\movies-watcher\\src\\redux\\features\\search-slice.ts":"15"},{"size":1590,"mtime":1655922305173,"results":"16","hashOfConfig":"17"},{"size":440,"mtime":1655544987009,"results":"18","hashOfConfig":"17"},{"size":1832,"mtime":1655981788329,"results":"19","hashOfConfig":"17"},{"size":836,"mtime":1655985395758,"results":"20","hashOfConfig":"17"},{"size":346,"mtime":1655922305174,"results":"21","hashOfConfig":"17"},{"size":2693,"mtime":1655985274960,"results":"22","hashOfConfig":"17"},{"size":4514,"mtime":1655986259902,"results":"23","hashOfConfig":"17"},{"size":517,"mtime":1655981788333,"results":"24","hashOfConfig":"17"},{"size":1099,"mtime":1655983405826,"results":"25","hashOfConfig":"17"},{"size":1935,"mtime":1655981788334,"results":"26","hashOfConfig":"17"},{"size":2002,"mtime":1655922305168,"results":"27","hashOfConfig":"17"},{"size":814,"mtime":1655983578084,"results":"28","hashOfConfig":"17"},{"size":1858,"mtime":1655981788331,"results":"29","hashOfConfig":"17"},{"size":1340,"mtime":1655981788338,"results":"30","hashOfConfig":"17"},{"size":1496,"mtime":1655985480351,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"f1fevb",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"43"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"43"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"43"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\projects\\movies-watcher\\src\\index.tsx",[],[],"D:\\projects\\movies-watcher\\src\\reportWebVitals.ts",[],[],[],"D:\\projects\\movies-watcher\\src\\App.tsx",["84","85"],[],"import React, {useEffect} from 'react';\r\n// import {Routes, Route, useLocation, Navigate} from 'react-router-dom'\r\nimport {Box, CircularProgress} from \"@mui/material\";\r\nimport {NavBar} from \"./components/NavBar/NavBar\";\r\nimport {useAppDispatch, useAppSelector} from './redux/app/hooks';\r\nimport {RootState} from './redux/app/store';\r\nimport {getMoviesAsync} from \"./redux/features/movies-slice\";\r\nimport {MoviesList} from \"./components/movies/MoviesList/MoviesList\";\r\nimport {Banner} from \"./components/Banner/Banner\";\r\nimport {useGetMoviesByGenresQuery} from \"./redux/services/apiSlice\";\r\nimport {getMoviesGenresAsync} from \"./redux/features/settings-slice\";\r\n\r\nexport const App = () => {\r\n    const dispatch = useAppDispatch()\r\n    const moviesList = useAppSelector((state: RootState) => state.movies)\r\n    const settings = useAppSelector((state: RootState) => state.settings)\r\n\r\n\r\n    useEffect(() => {\r\n        if (moviesList.status === 'succeeded' || moviesList.status === 'idle') {\r\n            dispatch(getMoviesAsync())\r\n        }\r\n        if (settings.status === 'succeeded' || settings.status === 'idle') {\r\n            dispatch(getMoviesGenresAsync())\r\n        }\r\n    }, [dispatch])\r\n    const {data, error, isLoading, isFetching, isSuccess} = useGetMoviesByGenresQuery()\r\n\r\n    if (moviesList.status === 'loading' || settings.status === 'loading') {\r\n        return <CircularProgress/>\r\n    }\r\n    return (\r\n        <Box component='main'>\r\n            {isLoading && <p>Loading</p>}\r\n            {error && <p>Something went wrong</p>}\r\n            {isSuccess && (\r\n                <>\r\n                    <NavBar/>\r\n                    <Banner moviesList={data.results}/>\r\n                </>\r\n\r\n            )\r\n            }\r\n            <MoviesList moviesLists={moviesList.moviesLists}/>\r\n        </Box>\r\n\r\n    );\r\n}\r\n\r\n",[],"D:\\projects\\movies-watcher\\src\\redux\\app\\store.ts",[],[],"D:\\projects\\movies-watcher\\src\\redux\\app\\hooks.ts",[],[],"D:\\projects\\movies-watcher\\src\\redux\\features\\movies-slice.ts",["86","87","88"],[],"import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport {requests} from \"../../config\";\r\nimport {getMoviesGenresRes, getMoviesQueryRes, MovieEntity, MoviesListByGenre} from \"../../types/typings\";\r\n\r\nexport const getMoviesAsync = createAsyncThunk(\r\n    'movies/getMoviesAsync',\r\n    async () => {\r\n        const [\r\n            trendingNow,\r\n            netflixOriginals,\r\n            topRated,\r\n            actionMovies,\r\n            comedyMovies,\r\n            horrorMovies,\r\n            romanceMovies,\r\n            documentaries,\r\n        ] = await Promise.all([\r\n            fetch(requests.fetchTrending).then((res) => res.json()),\r\n            fetch(requests.fetchNetflixOriginals).then((res) => res.json()),\r\n            fetch(requests.fetchTopRated).then((res) => res.json()),\r\n            fetch(requests.fetchActionMovies).then((res) => res.json()),\r\n            fetch(requests.fetchComedyMovies).then((res) => res.json()),\r\n            fetch(requests.fetchHorrorMovies).then((res) => res.json()),\r\n            fetch(requests.fetchRomanceMovies).then((res) => res.json()),\r\n            fetch(requests.fetchDocumentaries).then((res) => res.json()),\r\n        ])\r\n        return [\r\n            {title: 'Trending Now', result: trendingNow.results},\r\n            {title: 'Netflix Originals', result: netflixOriginals.results},\r\n            {title: 'Top Rated', result: topRated.results},\r\n            {title: 'Action Movies', result: actionMovies.results},\r\n            {title: 'Comedy Movies', result: comedyMovies.results},\r\n            {title: 'Horror Movies', result: horrorMovies.results},\r\n            {title: 'Romance Movies', result: romanceMovies.results},\r\n            {title: 'Documentaries', result: documentaries.results},\r\n        ]\r\n    },\r\n);\r\n\r\n\r\ninterface MoviesSliceState {\r\n    moviesLists: MoviesListByGenre[];\r\n    status: 'idle' | 'loading' | 'succeeded' | 'failed';\r\n    error: string | null;\r\n}\r\n\r\nconst initialState: MoviesSliceState = {\r\n    moviesLists: [],\r\n    status: 'idle',\r\n    error: null,\r\n};\r\n\r\nexport const moviesSlice = createSlice({\r\n    name: 'moviesList',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(getMoviesAsync.pending, (state, action) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(getMoviesAsync.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                state.moviesLists = action.payload\r\n            })\r\n            .addCase(getMoviesAsync.rejected, (state, action) => {\r\n                state.status = 'failed';\r\n            })\r\n\r\n    },\r\n});\r\n\r\nexport default moviesSlice.reducer;\r\n","D:\\projects\\movies-watcher\\src\\components\\NavBar\\NavBar.tsx",["89","90"],[],"D:\\projects\\movies-watcher\\src\\components\\movies\\MoviesList\\MoviesList.tsx",[],[],"D:\\projects\\movies-watcher\\src\\config.ts",[],[],"D:\\projects\\movies-watcher\\src\\components\\movies\\MoviesRow\\MoviesRow.tsx",["91","92","93","94","95"],[],"import React, {useRef, useState} from 'react';\r\nimport Carousel from 'react-material-ui-carousel'\r\nimport {Paper, Button} from '@mui/material'\r\nimport {MovieEntity} from \"../../../types/typings\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport IconButton from '@mui/material/IconButton';\r\n\r\nimport './MoviesRow.scss'\r\nimport {MovieCard} from \"../MovieCard/MovieCard\";\r\nimport ArrowBackIosIcon from '@mui/icons-material/ArrowBackIos';\r\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\r\n\r\ninterface Props {\r\n    position: number;\r\n    title: string;\r\n    movies: MovieEntity[]\r\n}\r\n\r\n\r\nexport const MoviesRow = ({title, movies, position}: Props) => {\r\n    const sliderRef = useRef(document.createElement(\"div\"))\r\n\r\n\r\n    const HandleClick = (direction: string, position: number) => {\r\n        const slider = document.getElementById(`slider-${position}`)\r\n        if (slider) {\r\n            if (direction === 'left') {\r\n                slider.scrollLeft = slider.scrollLeft - 240\r\n            }\r\n\r\n            if (direction === 'right') {\r\n                slider.scrollLeft = slider.scrollLeft + 240\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='row'>\r\n            <Typography variant='h4'>{title}</Typography>\r\n            <div className=\"row__slider\">\r\n                <ArrowBackIosIcon\r\n                    className='sliderArrow left'\r\n                    onClick={() => HandleClick('left', position)}/>\r\n                <div id={`slider-${position}`} className='row__container' ref={sliderRef}>\r\n                    {\r\n                        movies.map(movie => <MovieCard key={movie.id} movie={movie} row={position}/>)\r\n                    }\r\n                </div>\r\n                <ArrowForwardIosIcon className='sliderArrow right'\r\n                                     onClick={() => HandleClick('right', position)}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","D:\\projects\\movies-watcher\\src\\components\\movies\\MovieCard\\MovieCard.tsx",["96","97","98"],[],"import React, {useState} from 'react'\r\nimport {MovieEntity} from \"../../../types/typings\";\r\n\r\nimport './MovieCard.scss'\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\ninterface Props {\r\n    movie: MovieEntity,\r\n    row: number\r\n}\r\n\r\n\r\nconst baseUrl = 'https://image.tmdb.org/t/p/original/'\r\n\r\nexport const MovieCard = ({movie, row}: Props) => {\r\n    const [isHovered, setIsHovered] = useState(false)\r\n    return (\r\n        <div onMouseEnter={() => setIsHovered(true)} onMouseLeave={() => setIsHovered(false)}>\r\n            {/*<img key={movie.id} className={`row__poster ${row == 0 && \"row__poster--large\"}`}*/}\r\n            {/*     src={`${baseUrl}${row == 0 ? movie.poster_path : movie.backdrop_path}`}*/}\r\n            {/*     alt={movie.title}/>*/}\r\n\r\n            <div className={`movie-card__container ${row == 0 && \"movie-card__container--large\"}`}>\r\n                <img key={movie.id} className={`movie-card__poster ${row == 0 && \"movie-card__poster--large\"}`}\r\n                     src={`${baseUrl}${row == 0 ? movie.poster_path : movie.backdrop_path}`}\r\n                     alt={movie.title}/>\r\n                {isHovered && (\r\n                    <div className=\"movie-card__info-container\">\r\n                        <Typography variant=\"h5\" component=\"div\"\r\n                                    sx={{padding: '15px 10px'}}>{movie.title}</Typography>\r\n                        <Typography variant=\"subtitle1\" component=\"div\"\r\n                                    sx={{padding: '15px 10px'}}>Popularity: {movie.popularity}</Typography>\r\n                        <Typography variant=\"subtitle1\" component=\"div\"\r\n                                    sx={{padding: '15px 10px'}}>Votes: {movie.vote_count}</Typography>\r\n                        <Typography variant=\"subtitle1\" component=\"div\"\r\n                                    sx={{padding: '15px 10px'}}>Genre: {movie.genre_ids}</Typography>\r\n\r\n                    </div>\r\n\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","D:\\projects\\movies-watcher\\src\\redux\\services\\apiSlice.ts",["99"],[],"D:\\projects\\movies-watcher\\src\\components\\Banner\\Banner.tsx",["100","101","102","103"],[],"import React, {useEffect, useState} from \"react\";\r\nimport {MovieEntity, MovieGenre} from \"../../types/typings\";\r\n\r\nimport './Banner.scss'\r\nimport {useGetMoviesByGenresQuery, useGetMoviesGenresQuery} from \"../../redux/services/apiSlice\";\r\nimport {useAppSelector} from \"../../redux/app/hooks\";\r\nimport {CircularProgress} from \"@mui/material\";\r\n\r\ninterface Props {\r\n    moviesList: MovieEntity[]\r\n}\r\n\r\nconst truncate = (str: string, n: number) => {\r\n    return str?.length > n ? str.substring(0, n - 1) + \"...\" : str;\r\n}\r\n\r\nexport const Banner = ({moviesList}: Props) => {\r\n    const moviesLists = useAppSelector((state) => state.movies)\r\n    const genresList = useAppSelector((state) => state.settings)\r\n    const [randomMovie, setRandomMovie] = useState<MovieEntity>(moviesLists.moviesLists[0].result[Math.floor(Math.random() * 19)])\r\n    const [genres, setGenres] = useState<MovieGenre[]>([])\r\n\r\n\r\n    useEffect(() => {\r\n        const currentMovieGenres = genresList.movieGenres.filter((item) => {\r\n            return randomMovie?.genre_ids.includes(item.id);\r\n        });\r\n        setGenres(currentMovieGenres)\r\n    }, [])\r\n\r\n    if (moviesLists.status === 'loading') {\r\n        return <CircularProgress/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='banner' style={{\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: ' top center',\r\n            backgroundImage: `url(\"https://image.tmdb.org/t/p/original${randomMovie?.backdrop_path}\")`\r\n        }}>\r\n            <div className=\"banner__content\">\r\n                <h1 className='banner__title'>{randomMovie?.title || randomMovie?.original_title}</h1>\r\n                <h3 className='banner__overview'>{truncate(randomMovie.overview, 150)}</h3>\r\n                <div>{genres.map(genre => <p key={genre.id}>{genre.name}</p>)}</div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","D:\\projects\\movies-watcher\\src\\redux\\features\\settings-slice.ts",[],[],"D:\\projects\\movies-watcher\\src\\redux\\features\\search-slice.ts",["104","105"],[],{"ruleId":"106","severity":1,"message":"107","line":26,"column":8,"nodeType":"108","endLine":26,"endColumn":18,"suggestions":"109"},{"ruleId":"110","severity":1,"message":"111","line":27,"column":36,"nodeType":"112","messageId":"113","endLine":27,"endColumn":46},{"ruleId":"110","severity":1,"message":"114","line":3,"column":9,"nodeType":"112","messageId":"113","endLine":3,"endColumn":27},{"ruleId":"110","severity":1,"message":"115","line":3,"column":29,"nodeType":"112","messageId":"113","endLine":3,"endColumn":46},{"ruleId":"110","severity":1,"message":"116","line":3,"column":48,"nodeType":"112","messageId":"113","endLine":3,"endColumn":59},{"ruleId":"110","severity":1,"message":"117","line":9,"column":20,"nodeType":"112","messageId":"113","endLine":9,"endColumn":26},{"ruleId":"110","severity":1,"message":"118","line":10,"column":9,"nodeType":"112","messageId":"113","endLine":10,"endColumn":20},{"ruleId":"110","severity":1,"message":"119","line":1,"column":24,"nodeType":"112","messageId":"113","endLine":1,"endColumn":32},{"ruleId":"110","severity":1,"message":"120","line":2,"column":8,"nodeType":"112","messageId":"113","endLine":2,"endColumn":16},{"ruleId":"110","severity":1,"message":"121","line":3,"column":9,"nodeType":"112","messageId":"113","endLine":3,"endColumn":14},{"ruleId":"110","severity":1,"message":"122","line":3,"column":16,"nodeType":"112","messageId":"113","endLine":3,"endColumn":22},{"ruleId":"110","severity":1,"message":"123","line":6,"column":8,"nodeType":"112","messageId":"113","endLine":6,"endColumn":18},{"ruleId":"124","severity":1,"message":"125","line":23,"column":58,"nodeType":"126","messageId":"127","endLine":23,"endColumn":60},{"ruleId":"124","severity":1,"message":"125","line":24,"column":74,"nodeType":"126","messageId":"127","endLine":24,"endColumn":76},{"ruleId":"124","severity":1,"message":"125","line":25,"column":44,"nodeType":"126","messageId":"127","endLine":25,"endColumn":46},{"ruleId":"110","severity":1,"message":"128","line":5,"column":7,"nodeType":"112","messageId":"113","endLine":5,"endColumn":14},{"ruleId":"110","severity":1,"message":"129","line":5,"column":9,"nodeType":"112","messageId":"113","endLine":5,"endColumn":34},{"ruleId":"110","severity":1,"message":"130","line":5,"column":36,"nodeType":"112","messageId":"113","endLine":5,"endColumn":59},{"ruleId":"110","severity":1,"message":"131","line":20,"column":25,"nodeType":"112","messageId":"113","endLine":20,"endColumn":39},{"ruleId":"106","severity":1,"message":"132","line":29,"column":8,"nodeType":"108","endLine":29,"endColumn":10,"suggestions":"133"},{"ruleId":"110","severity":1,"message":"114","line":3,"column":9,"nodeType":"112","messageId":"113","endLine":3,"endColumn":27},{"ruleId":"110","severity":1,"message":"134","line":3,"column":48,"nodeType":"112","messageId":"113","endLine":3,"endColumn":65},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'moviesList.status' and 'settings.status'. Either include them or remove the dependency array.","ArrayExpression",["135"],"@typescript-eslint/no-unused-vars","'isFetching' is assigned a value but never used.","Identifier","unusedVar","'getMoviesGenresRes' is defined but never used.","'getMoviesQueryRes' is defined but never used.","'MovieEntity' is defined but never used.","'useRef' is defined but never used.","'useNavigate' is defined but never used.","'useState' is defined but never used.","'Carousel' is defined but never used.","'Paper' is defined but never used.","'Button' is defined but never used.","'IconButton' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'API_KEY' is assigned a value but never used.","'useGetMoviesByGenresQuery' is defined but never used.","'useGetMoviesGenresQuery' is defined but never used.","'setRandomMovie' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'genresList.movieGenres' and 'randomMovie?.genre_ids'. Either include them or remove the dependency array.",["136"],"'MoviesListByGenre' is defined but never used.",{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},"Update the dependencies array to be: [dispatch, moviesList.status, settings.status]",{"range":"141","text":"142"},"Update the dependencies array to be: [genresList.movieGenres, randomMovie?.genre_ids]",{"range":"143","text":"144"},[1182,1192],"[dispatch, moviesList.status, settings.status]",[1120,1122],"[genresList.movieGenres, randomMovie?.genre_ids]"]