[{"D:\\projects\\movies-watcher\\src\\index.tsx":"1","D:\\projects\\movies-watcher\\src\\reportWebVitals.ts":"2","D:\\projects\\movies-watcher\\src\\App.tsx":"3","D:\\projects\\movies-watcher\\src\\redux\\app\\store.ts":"4","D:\\projects\\movies-watcher\\src\\redux\\app\\hooks.ts":"5","D:\\projects\\movies-watcher\\src\\redux\\features\\movies-slice.ts":"6","D:\\projects\\movies-watcher\\src\\components\\NavBar\\NavBar.tsx":"7","D:\\projects\\movies-watcher\\src\\components\\movies\\MoviesList\\MoviesList.tsx":"8","D:\\projects\\movies-watcher\\src\\config.ts":"9","D:\\projects\\movies-watcher\\src\\components\\movies\\MoviesRow\\MoviesRow.tsx":"10","D:\\projects\\movies-watcher\\src\\components\\movies\\MovieCard\\MovieCard.tsx":"11","D:\\projects\\movies-watcher\\src\\redux\\services\\apiSlice.ts":"12","D:\\projects\\movies-watcher\\src\\components\\Banner\\Banner.tsx":"13","D:\\projects\\movies-watcher\\src\\redux\\features\\settings-slice.ts":"14","D:\\projects\\movies-watcher\\src\\redux\\features\\search-slice.ts":"15","D:\\projects\\movies-watcher\\src\\views\\Home\\HomeView.tsx":"16","D:\\projects\\movies-watcher\\src\\views\\SearchResultsView\\SearchResultsView.tsx":"17","D:\\projects\\movies-watcher\\src\\utils\\motionUtils.ts":"18"},{"size":1850,"mtime":1656028641967,"results":"19","hashOfConfig":"20"},{"size":440,"mtime":1655544987009,"results":"21","hashOfConfig":"20"},{"size":1833,"mtime":1656040951214,"results":"22","hashOfConfig":"20"},{"size":836,"mtime":1655988625948,"results":"23","hashOfConfig":"20"},{"size":346,"mtime":1655922305174,"results":"24","hashOfConfig":"20"},{"size":2641,"mtime":1656028641968,"results":"25","hashOfConfig":"20"},{"size":4547,"mtime":1656037428918,"results":"26","hashOfConfig":"20"},{"size":513,"mtime":1656028641966,"results":"27","hashOfConfig":"20"},{"size":1099,"mtime":1655988625947,"results":"28","hashOfConfig":"20"},{"size":1777,"mtime":1656028641967,"results":"29","hashOfConfig":"20"},{"size":7814,"mtime":1656038294559,"results":"30","hashOfConfig":"20"},{"size":760,"mtime":1656028641970,"results":"31","hashOfConfig":"20"},{"size":2973,"mtime":1656040951215,"results":"32","hashOfConfig":"20"},{"size":1351,"mtime":1656004151914,"results":"33","hashOfConfig":"20"},{"size":1577,"mtime":1656028641969,"results":"34","hashOfConfig":"20"},{"size":567,"mtime":1656040951224,"results":"35","hashOfConfig":"20"},{"size":1499,"mtime":1656040951225,"results":"36","hashOfConfig":"20"},{"size":1973,"mtime":1656040951223,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"f1fevb",{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"55"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\projects\\movies-watcher\\src\\index.tsx",[],[],"D:\\projects\\movies-watcher\\src\\reportWebVitals.ts",[],[],[],"D:\\projects\\movies-watcher\\src\\App.tsx",["97"],[],"import React, {useEffect} from 'react';\r\nimport {Routes, Route, useLocation, Navigate} from 'react-router-dom'\r\nimport {Box, CircularProgress} from \"@mui/material\";\r\nimport {NavBar} from \"./components/NavBar/NavBar\";\r\nimport {useAppDispatch, useAppSelector} from './redux/app/hooks';\r\nimport {RootState} from './redux/app/store';\r\nimport {getMoviesAsync} from \"./redux/features/movies-slice\";\r\nimport {getMoviesGenresAsync} from \"./redux/features/settings-slice\";\r\nimport {HomeView} from \"./views/Home/HomeView\";\r\nimport {SearchResultsView} from \"./views/SearchResultsView/SearchResultsView\";\r\nimport {AnimatePresence} from \"framer-motion\";\r\n\r\nexport const App = () => {\r\n    const location = useLocation()\r\n    const dispatch = useAppDispatch()\r\n    const moviesList = useAppSelector((state: RootState) => state.movies)\r\n    const settings = useAppSelector((state: RootState) => state.settings)\r\n\r\n\r\n    useEffect(() => {\r\n        if (moviesList.status === 'succeeded' || moviesList.status === 'idle') {\r\n            dispatch(getMoviesAsync())\r\n        }\r\n        if (settings.status === 'succeeded' || settings.status === 'idle') {\r\n            dispatch(getMoviesGenresAsync())\r\n        }\r\n    }, [dispatch])\r\n\r\n\r\n    if (moviesList.status === 'loading' || settings.status === 'loading') {\r\n        return <CircularProgress/>\r\n    }\r\n    return (\r\n        <Box component='main'>\r\n            <NavBar/>\r\n            <AnimatePresence exitBeforeEnter>\r\n                <Routes location={location} key={location.pathname}>\r\n                    <Route path=\"/\" element={<Navigate replace to=\"/home\"/>}/>\r\n                    <Route path=\"/home\" element={<HomeView/>}/>\r\n                    <Route path=\"/search\" element={<SearchResultsView/>}/>\r\n                </Routes>\r\n            </AnimatePresence>\r\n        </Box>\r\n\r\n    );\r\n}\r\n\r\n","D:\\projects\\movies-watcher\\src\\redux\\app\\store.ts",[],[],"D:\\projects\\movies-watcher\\src\\redux\\app\\hooks.ts",[],[],[],"D:\\projects\\movies-watcher\\src\\redux\\features\\movies-slice.ts",[],[],"D:\\projects\\movies-watcher\\src\\components\\NavBar\\NavBar.tsx",[],[],"D:\\projects\\movies-watcher\\src\\components\\movies\\MoviesList\\MoviesList.tsx",[],[],"D:\\projects\\movies-watcher\\src\\config.ts",[],[],"D:\\projects\\movies-watcher\\src\\components\\movies\\MoviesRow\\MoviesRow.tsx",[],[],"D:\\projects\\movies-watcher\\src\\components\\movies\\MovieCard\\MovieCard.tsx",["98"],[],"import React, {useEffect, useState} from 'react'\r\nimport {MovieEntity, MovieGenre} from \"../../../types/typings\";\r\nimport {motion} from \"framer-motion\";\r\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\r\nimport {useAppSelector} from \"../../../redux/app/hooks\";\r\nimport {Box, CircularProgress} from \"@mui/material\";\r\nimport {\r\n    modalFadeInUpVariants,\r\n    posterFadeInVariants,\r\n    staggerOne\r\n} from '../../../utils/motionUtils';\r\nimport Modal from \"@mui/material/Modal\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport Fade from \"@mui/material/Fade\";\r\n\r\nimport './MovieCard.scss'\r\nimport './Modal.scss'\r\n\r\nconst style = {\r\n    position: 'absolute' as 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: \"80%\",\r\n    maxWidth: 900,\r\n    bgcolor: '#181818',\r\n    boxShadow: 24,\r\n    borderRadius: '17px',\r\n    overflow: 'hidden',\r\n    outline: 'none',\r\n    p: 0,\r\n};\r\n\r\n\r\ninterface Props {\r\n    movie: MovieEntity,\r\n    row: number\r\n}\r\n\r\n\r\nconst baseUrl = 'https://image.tmdb.org/t/p/original/'\r\n\r\nexport const MovieCard = ({movie, row}: Props) => {\r\n    // const [isHovered, setIsHovered] = useState(false)\r\n    const genresList = useAppSelector((state) => state.settings)\r\n    const [genres, setGenres] = useState<MovieGenre[]>([])\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleOpen = () => setOpen(true);\r\n    const handleClose = () => setOpen(false);\r\n    const fallbackTitle = movie.title || movie.original_title || movie.name || movie.original_name\r\n    useEffect(() => {\r\n        const currentMovieGenres = genresList.movieGenres.filter((item) => {\r\n            return movie?.genre_ids.includes(item.id);\r\n        });\r\n        setGenres(currentMovieGenres)\r\n    }, [])\r\n\r\n    if (genresList.status === 'loading') {\r\n        return <CircularProgress/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal className='modal' sx={{outline: 'none'}}\r\n                   open={open}\r\n                   onClose={handleClose}\r\n                   closeAfterTransition\r\n                   BackdropComponent={Backdrop}\r\n                   BackdropProps={{\r\n                       timeout: 500,\r\n                   }}\r\n            >\r\n                <Fade in={open}>\r\n                    <Box sx={style}>\r\n                        {movie.backdrop_path ?\r\n                            <img alt={fallbackTitle} className=\"modal__img\" src={`${baseUrl}${movie.backdrop_path}`}/> :\r\n                            <img alt={fallbackTitle} className=\"modal__img\"\r\n                                 src={`https://www.solidbackgrounds.com/images/2560x1440/2560x1440-davys-grey-solid-color-background.jpg`}/>\r\n                        }\r\n                        <motion.div variants={staggerOne} initial=\"initial\" animate=\"animate\" exit=\"exit\"\r\n                                    className=\"modal__info--wrp\">\r\n                            <motion.h3 variants={modalFadeInUpVariants}\r\n                                       className=\"modal__info--title\">{fallbackTitle}</motion.h3>\r\n                            <motion.p variants={modalFadeInUpVariants}\r\n                                      className=\"modal__info--description\">{movie.overview}</motion.p>\r\n                            <motion.hr variants={modalFadeInUpVariants} className=\"modal__info--line\"/>\r\n                            <motion.h4 variants={modalFadeInUpVariants} className=\"modal__info--otherTitle\">Info\r\n                                on <b>{fallbackTitle}</b></motion.h4>\r\n                            <motion.div variants={modalFadeInUpVariants} className=\"modal__info--row\">\r\n                                <span className='modal__info--row-label'>Genres: </span>\r\n                                <span\r\n                                    className=\"modal__info--row-description\">{genres.map(genre => genre.name).join(\", \")}</span>\r\n                            </motion.div>\r\n                            <motion.div variants={modalFadeInUpVariants} className=\"modal__info--row\">\r\n\t\t\t\t\t\t\t\t\t<span className='modal__info--row-label'>\r\n\t\t\t\t\t\t\t\t\t\tRelease date:\r\n\t\t\t\t\t\t\t\t\t</span>\r\n                                <span className=\"modal__info--row-description\">{movie.release_date}</span>\r\n                            </motion.div>\r\n                            <motion.div variants={modalFadeInUpVariants} className=\"modal__info--row\">\r\n                                <span className='modal__info--row-label'>Original language: </span>\r\n                                <span className=\"modal__info--row-description\">{movie.original_language}</span>\r\n                            </motion.div>\r\n                            <motion.div variants={modalFadeInUpVariants} className=\"modal__info--row\">\r\n                                <div className='modal__info--row-cell'>\r\n                                    <span className='modal__info--row-label'>Popularity: </span>\r\n                                    <span className=\"modal__info--row-description\">{movie.popularity}</span>\r\n                                </div>\r\n                                <div className='modal__info--row-cell'>\r\n                                    <span className='modal__info--row-label'>Votes: </span>\r\n                                    <span className=\"modal__info--row-description\">{movie.vote_count}</span>\r\n                                </div>\r\n                                <div className='modal__info--row-cell'>\r\n                                    <span className='modal__info--row-label'>Average vote: </span>\r\n                                    <span\r\n                                        className=\"modal__info--row-description\">{movie.vote_average || \"Not available\"}</span>\r\n                                </div>\r\n                            </motion.div>\r\n                        </motion.div>\r\n                    </Box>\r\n                </Fade>\r\n            </Modal>\r\n            <motion.div\r\n                variants={posterFadeInVariants}\r\n                className={`poster ${row === 0 ? 'poster__large' : null}`}\r\n                onClick={handleOpen}\r\n            >\r\n\r\n                <img className=\"poster__img\" alt={fallbackTitle}\r\n                     src={`${baseUrl}${row === 0 ? movie.poster_path : movie.backdrop_path}`}/>\r\n\r\n                <div className=\"poster__info\">\r\n                    <div className=\"poster__info--box-1\">\r\n                        <h4 className=\"poster__info--title\">{fallbackTitle}</h4>\r\n                        <ul className=\"poster__info--genres\">\r\n                            {genres.map(genre => (\r\n                                <li key={`Genre--id_${genre.id}`}\r\n                                    className=\"poster__info--genres-title\">{genre.name}</li>\r\n                            ))}\r\n                        </ul>\r\n                        <div className=\"poster__info--row\">\r\n                            <div className='poster__info--row-cell'>\r\n                                <span className='poster__info--row-label'>Popularity: </span>\r\n                                <span className=\"poster__info--row-description\">{Math.floor(movie.popularity)}</span>\r\n                            </div>\r\n                            <div className='poster__info--row-cell'>\r\n                                <span className='poster__info--row-label'>Votes: </span>\r\n                                <span className=\"poster__info--row-description\">{movie.vote_count}</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"poster__info--box-2\">\r\n                        <MoreVertIcon fontSize='large' className=\"poster__info--icon\"/>\r\n                    </div>\r\n                </div>\r\n            </motion.div>\r\n        </>\r\n    )\r\n}\r\n","D:\\projects\\movies-watcher\\src\\redux\\services\\apiSlice.ts",[],[],"D:\\projects\\movies-watcher\\src\\components\\Banner\\Banner.tsx",["99"],[],"import React, {useEffect, useState} from \"react\";\r\n\r\nimport './Banner.scss'\r\nimport {useAppSelector} from \"../../redux/app/hooks\";\r\nimport {MovieEntity, MovieGenre} from \"../../types/typings\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {motion} from \"framer-motion\";\r\nimport {bannerFadeInUpVariants, bannerFadeInVariants} from \"../../utils/motionUtils\";\r\n\r\nconst truncate = (str: string, n: number) => {\r\n    return str?.length > n ? str.substring(0, n - 1) + \"...\" : str;\r\n}\r\n\r\nexport const Banner = () => {\r\n    const moviesLists = useAppSelector((state) => state.movies)\r\n    const genresList = useAppSelector((state) => state.settings)\r\n    const [genres, setGenres] = useState<MovieGenre[]>([])\r\n    const [randomMovie, setRandomMovie] = useState<MovieEntity>({\r\n        \"adult\": false,\r\n        \"backdrop_path\": \"\",\r\n        \"genre_ids\": [],\r\n        \"id\": 0,\r\n        \"original_language\": \"\",\r\n        \"name\": \"\",\r\n        \"original_name\": \"\",\r\n        \"original_title\": \"\",\r\n        \"overview\": \"\",\r\n        \"popularity\": 0,\r\n        \"poster_path\": \"\",\r\n        \"release_date\": \"\",\r\n        \"title\": \"\",\r\n        \"video\": false,\r\n        \"vote_average\": 0,\r\n        \"vote_count\": 0,\r\n        \"maturityRating\": \"\",\r\n    })\r\n    useEffect(() => {\r\n        if (moviesLists.status === 'succeeded') {\r\n            setRandomMovie(moviesLists.moviesLists[0].result[Math.floor(Math.random() * 19)])\r\n            const currentMovieGenres = genresList.movieGenres.filter((item) => {\r\n                return moviesLists.moviesLists[0].result[0]?.genre_ids.includes(item.id);\r\n            });\r\n            setGenres(currentMovieGenres)\r\n        }\r\n\r\n    }, [moviesLists])\r\n\r\n    if (moviesLists.moviesLists.length === 0) {\r\n        return <CircularProgress/>\r\n    }\r\n\r\n    return (\r\n        <motion.header\r\n            variants={bannerFadeInVariants}\r\n            initial='initial'\r\n            animate='animate'\r\n            exit='exit'\r\n            className='banner' style={{\r\n            backgroundImage: `url(\"https://image.tmdb.org/t/p/original${randomMovie?.backdrop_path}\")`\r\n        }}>\r\n            <motion.div\r\n                variants={bannerFadeInUpVariants}\r\n                initial='initial'\r\n                animate='animate'\r\n                exit='exit'\r\n                className=\"banner__content\">\r\n                <motion.h1\r\n                    className='banner__content--title'>{randomMovie.title || randomMovie.original_title || randomMovie.name || randomMovie.original_name}</motion.h1>\r\n                <motion.p className='banner__content--description'>{truncate(randomMovie.overview, 150)}</motion.p>\r\n                <motion.div className='banner__content--genres'>{genres.map(genre => <p key={genre.id}\r\n                                                                                        className='banner__content--genres-item'>{genre.name}</p>)}</motion.div>\r\n\r\n            </motion.div>\r\n\r\n        </motion.header>\r\n    )\r\n}\r\n","D:\\projects\\movies-watcher\\src\\redux\\features\\settings-slice.ts",[],[],"D:\\projects\\movies-watcher\\src\\redux\\features\\search-slice.ts",[],[],"D:\\projects\\movies-watcher\\src\\views\\Home\\HomeView.tsx",[],[],"D:\\projects\\movies-watcher\\src\\views\\SearchResultsView\\SearchResultsView.tsx",[],[],"D:\\projects\\movies-watcher\\src\\utils\\motionUtils.ts",[],[],{"ruleId":"100","severity":1,"message":"101","line":27,"column":8,"nodeType":"102","endLine":27,"endColumn":18,"suggestions":"103"},{"ruleId":"100","severity":1,"message":"104","line":56,"column":8,"nodeType":"102","endLine":56,"endColumn":10,"suggestions":"105"},{"ruleId":"100","severity":1,"message":"106","line":46,"column":8,"nodeType":"102","endLine":46,"endColumn":21,"suggestions":"107"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'moviesList.status' and 'settings.status'. Either include them or remove the dependency array.","ArrayExpression",["108"],"React Hook useEffect has missing dependencies: 'genresList.movieGenres' and 'movie?.genre_ids'. Either include them or remove the dependency array.",["109"],"React Hook useEffect has a missing dependency: 'genresList.movieGenres'. Either include it or remove the dependency array.",["110"],{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},"Update the dependencies array to be: [dispatch, moviesList.status, settings.status]",{"range":"117","text":"118"},"Update the dependencies array to be: [genresList.movieGenres, movie?.genre_ids]",{"range":"119","text":"120"},"Update the dependencies array to be: [genresList.movieGenres, moviesLists]",{"range":"121","text":"122"},[1199,1209],"[dispatch, moviesList.status, settings.status]",[1761,1763],"[genresList.movieGenres, movie?.genre_ids]",[1667,1680],"[genresList.movieGenres, moviesLists]"]